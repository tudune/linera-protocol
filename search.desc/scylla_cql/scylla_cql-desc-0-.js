searchState.loadedDescShard("scylla_cql", 0, "Derive macro for the <code>DeserializeRow</code> trait that generates …\nDerive macro for the <code>DeserializeValue</code> trait that generates …\nDerive macro for the <code>SerializeRow</code> trait which serializes …\nDerive macro for the <code>SerializeValue</code> trait which serializes …\nFramework for deserialization of data returned by database …\nTypes and traits related to serialization of values to the …\nAn error indicating that a failure happened during …\nAn error indicating that a failure happened during type …\nRetrieve an error reason by downcasting to specific type.\nRetrieve an error reason by downcasting to specific type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>TypeCheckError</code>.\nConstructs a new <code>DeserializationError</code>.\nProvides types for dealing with row deserialization.\nProvides types for dealing with CQL value deserialization.\nA reference to a part of the frame.\nReturns a reference to the Bytes object which encompasses …\nReturns the subslice.\nReturns a mutable reference to the subslice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the slice has length of 0.\nCreates a new FrameSlice from a reference of a Bytes …\nCreates an empty FrameSlice.\nReads and consumes a <code>[bytes]</code> item from the beginning of …\nReturns a new Bytes object which is a subslice of the …\nIterates over the whole result, returning raw rows.\nA <em>lending</em> iterator over serialized rows.\nA typed version of RawRowIterator which deserializes the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the metadata associated with the response (paging …\nCreates a new iterator over raw rows from a serialized …\nCreates a new TypedRowIterator from given RawRowIterator.\nCreates a new <code>RawRowLendingIterator</code>, consuming given …\nReturns a <code>ColumnIterator</code> that represents the next row.\nReturns the remaining number of rows that this iterator is …\nReturns the remaining number of rows that this iterator is …\nReturns the remaining number of rows that this iterator is …\nReturns information about the columns of rows that are …\nReturns information about the columns of rows that are …\nFailed to deserialize a row from the DB response, …\nDescribes why deserializing a result row failed.\nFailed to type check incoming result column types again …\nDescribes why type checking incoming result column types …\nOne of the columns failed to deserialize.\nIterates over columns of a single row.\nA different column name was expected at given position.\nColumn type check failed between Rust type and DB type at …\nThe CQL row contains a column for which a corresponding …\nA type that can be deserialized from a row that was …\nDuplicated column in DB metadata.\nRepresents a raw, unparsed column value.\nOne of the raw columns failed to deserialize, most probably\nSeveral values required by the Rust type are not provided …\nThe Rust type expects <code>rust_cols</code> columns, but the statement …\nReturns the remaining number of columns that this iterator …\nThe CQL types of the values that the Rust type was being …\nDeserializes a row from given column iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetailed information about the failure.\nDetailed information about the failure.\nCreates a new iterator over a single row.\nName of the Rust type used to represent the values.\nName of the Rust type used to represent the row.\nChecks that the schema of the result matches what this …\nIndex of the column that failed to deserialize.\nIndex of the raw column that failed to deserialize.\nName of the column that failed to deserialize.\nName of the raw column that failed to deserialize.\nThe error that caused the column deserialization to fail.\nThe error that caused the raw column deserialization to …\nIndex of the excess column.\nIndex of the column having mismatched name.\nIndex of the column.\nColumn index of the second occurrence of the column with …\nName of the column that is present in CQL row but not in …\nName of the column, as provided by the DB.\nThe name of the duplicated column.\nNames of the columns in the Rust type for which the DB …\nThe number of columns that the statement operates on.\nName of the column for which the DB requested a value.\nInner type check error due to the type mismatch.\nIndex of the field determining the expected name.\nThe number of values that the Rust type provides.\nName of the column, as expected by the Rust type.\nFailed to deserialize one of date’s fields.\nFailed to deserialize decimal’s scale.\nThe length of read value in bytes is not suitable for IP …\nDeserialization of one of the built-in types failed.\nDescribes why deserialization of some of the built-in …\nType checking of one of the built-in types failed.\nDescribes why type checking some of the built-in types …\nThe length of read value in bytes is different than …\nIterates over a sequence of <code>[bytes]</code> items from a frame …\nA type that can be deserialized from a column value inside …\nDuplicated field in serialized data.\nOne of the elements of the set/list failed to deserialize.\nIncompatible element types.\nValues that may be empty or not.\nUDT contains an excess field, which does not correspond to …\nExpected valid ASCII string.\nExpected non-null value, got null.\nOne of the tuple fields failed to deserialize.\nOne of the fields failed to deserialize.\nA different field name was expected at given position.\nThe CQL type and the Rust type of a tuple field failed to …\nType check failed between UDT and Rust type field.\nIterates over a sequence of <code>[bytes]</code> items from a frame …\nInvalid UTF-8 string.\nOne of the keys in the map failed to deserialize.\nIncompatible key types.\nFailed to deserialize set or list’s length.\nFailed to deserialize map’s length.\nAn iterator over either a CQL set or list.\nDescribes why deserialization of a map type failed.\nA type check failure specific to a CQL map.\nA deserialization failure specific to a CQL map.\nAn iterator over a CQL map.\nDescribes why type checking of a map type failed.\nA value that may be empty or not.\nExpected one from a list of particular types.\nThe CQL type is not a map.\nThe CQL type is not a set.\nThe CQL type is neither a set not a list.\nThe CQL type is not a tuple.\nThe CQL type is not a user defined type.\nFailed to deserialize raw bytes of cql value.\nDescribes why deserialization of a set or list type failed.\nA type check failure specific to a CQL set or list.\nA deserialization failure specific to a CQL set or list.\nDescribes why type checking of a set or list type failed.\nFewer fields present in the UDT than required by the Rust …\nDescribes why deserialization of a tuple failed.\nA type check failure specific to a CQL tuple.\nA deserialization failure specific to a CQL tuple.\nDescribes why type checking of a tuple failed.\nDescribes why deserialization of a user defined type …\nA type check failure specific to a CQL UDT.\nA deserialization failure specific to a CQL UDT.\nAn iterator over fields of a User Defined Type.\nDescribes why type checking of a user defined type failed.\nDeserialization of this CQL type is not supported by the …\nOne of the values in the map failed to deserialize.\nThe read value is out of range supported by the Rust type.\nIncompatible value types.\nThe CQL UDT type does not have some fields that is …\nThe tuple has the wrong element count.\nThe CQL type that the Rust type was being deserialized …\nThe CQL type that the Rust type was being deserialized …\nDeserialize a column value from given serialized …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetailed information about the failure.\nDetailed information about the failure.\nName of the Rust type being deserialized.\nName of the Rust type being deserialized.\nChecks that the column type matches what this type expects.\nThe list of types that the Rust type can deserialize from.\nThe error that caused the tuple field deserialization to …\nIndex of the tuple field that failed to deserialize.\nThe number of elements that the CQL tuple type has.\nThe type check error that occurred.\nThe index of the field whose type check failed.\nThe number of elements that the Rust tuple has.\nThe error that caused the UDT field deserialization to …\nName of the field which failed to deserialize.\nThe name of the CQL UDT field.\nThe name of the CQL UDT field.\nInner type check error that occurred.\nThe name of the duplicated field.\nThe name of the field whose type check failed.\nNames of fields that the Rust struct requires but are …\nIndex of the field in the Rust struct.\nThe name of the Rust field.\nThe wire protocol compression algorithm.\nLZ4 compression algorithm.\nSnappy compression algorithm.\nAn error type for parsing an enum value from a primitive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCQL binary protocol in-wire types.\nFailed to serialize AUTH_RESPONSE request.\nFailed to serialize BATCH request.\nFailed to read frame body from the socket.\nAn error type returned when deserialization of […\nFailed to parse column count.\nFailed to parse column count.\nFailed to parse column count.\nAn error type returned when deserialization of table …\nFailed to parse column spec.\nFailed to parse column spec.\nThe type of error that appeared during deserialization of …\nConnection was closed before whole frame was read.\nAn error type returned when deserialization of …\nAn error type returned when deserialization of …\nAn error type returned when deserialization of …\nAn error type returned when deserialization of ERROR …\nAn error type returned when deserialization of <code>EVENT</code> …\nAn error that occurred during CQL request serialization.\nAn error type returned when deserialization of CQL server …\nAn error type returned when deserialization of RESULT …\nAn error type returned when deserialization of SUPPORTED …\nAn error type returned when deserialization of CQL type …\nFailed to deserialize frame’s custom payload.\nFailed to serialize EXECUTE request.\nFailed to parse metadata flags.\nFailed to parse metadata flags.\nFailed to parse metadata flags.\nAn error returned by <code>parse_response_body_extensions</code>.\nReceived a frame marked as coming from a client.\nAn error that occurred during frame header deserialization.\nFailed to parse global table spec.\nFailed to parse global table spec.\nFailed to read the frame header from the socket.\nA low level deserialization error.\nFailed to decompress frame body (lz4).\nFrame is compressed, but no compression was negotiated for …\nFailed to parse paging state response.\nFailed to parse paging state response.\nFailed to parse partition key count.\nFailed to parse partition key index.\nFailed to serialize PREPARE request.\nAn error type returned when deserialization of statement’…\nAn error type returned when deserialization of <code>RESULT::</code>…\nFailed to serialize QUERY request.\nAn error that occurred during initial deserialization of …\nFailed to serialize REGISTER request.\nAn error returned when lazy deserialization of result …\nAn error type returned when deserialization of result …\nFailed to deserialize result metadata.\nReceived malformed rows count from the server.\nAn error type returned when deserialization of …\nRequest body compression failed.\nFailed to decompress frame body (snap).\nFailed to serialize STARTUP request.\nAn error type returned when deserialization of table …\nFailed to deserialize frame trace id.\nReceived unknown response opcode.\nReceived a frame with unsupported version.\nFailed to deserialize warnings attached to frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPossible requests sent by the client.\nNot intended for driver’s direct usage (as driver has no …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves consistency from request frame, if present.\nRetrieves serial consistency from request frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn error type returned when serialization of AUTH_RESPONSE …\nMaximum response’s body length exceeded.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of announced batch statements differs from actual …\nAn error type returned when serialization of BATCH request …\nAn error type returned when serialization of one of the …\nThe type of a batch.\nMaximum value of statement id exceeded.\nFailed to serialize a statement in the batch.\nFailed to serialize the CQL statement string.\nMaximum number of batch statements exceeded.\nToo many bound values provided.\nNumber of batch statements differs from number of provided …\nFailed to serialize statement’s bound values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn error type returned when serialization of EXECUTE …\nFailed to serialize query parameters.\nFailed to serialize prepared statement id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn error type returned when serialization of PREPARE …\nFailed to serialize the CQL statement string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFailed to serialize paging state.\nThe state of a paged query, i.e. where to resume fetching …\nFailed to serialize query parameters.\nAn error type returned when serialization of query …\nAn error type returned when serialization of QUERY request …\nFailed to serialize the CQL statement string.\nReturns the inner representation of PagingState. One can …\nDetermines if the query has finished or it should be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the response into ControlFlow, signalling whether …\nCreates PagingState from its inner representation. One can …\nA start state - the state of a not-yet-started paged query.\nFailed to serialize event types list.\nAn error type returned when serialization of REGISTER …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFailed to serialize startup options.\nAn error type returned when serialization of STARTUP …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPossible CQL responses received from the server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempted to create a keyspace or a table that was already …\nAuthentication failed - bad credentials\nLogged batch write. If this type is received, it means the …\nTimeout occurred during the write to the batch log when a …\nTimeout occurred during Compare And Set write/update\nTimeout occurred  when a cdc_total_space_in_mb is exceeded …\nThe query is invalid because of some configuration issue\nCounter write (batched or not)\nAn error sent from the database in response to a query as …\nUser defined function failed during execution\nThe query is syntactically correct but invalid\nThe coordinator node is still bootstrapping\nType of the operation rejected by rate limiting\nOther error code not specified in the specification\nOther type not specified in the specification\nThe request cannot be processed because the coordinator …\nInvalid protocol message received from the driver\nRate limit was exceeded for a partition affected by the …\nA non-timeout error during a read request\nNot enough nodes responded to the read request in time to …\nInternal server error. This indicates a server-side bug\nNon-batched non-counter write\nThe submitted query has a syntax error\nError during truncate operation\nThe logged user doesn’t have the right to perform the …\nNot enough nodes are alive to satisfy required consistency …\nUnlogged batch. No batch log write has been attempted.\nTried to execute a prepared statement that is not …\nWrite involves VIEW update and failure to acquire local …\nA non-timeout error during a write request\nNot enough nodes responded to the write request in time to …\nType of write operation requested\nDecides whether the error can be ignored. If true, the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFound number of active nodes\nTypes of arguments passed to the function\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nReplica that was asked for data has responded\nReplica that was asked for data has responded\nName of the failed function\nCreated keyspace name or name of the keyspace in which …\nKeyspace of the failed function\nNumber of nodes that experience a failure while executing …\nNumber of nodes that experience a failure while executing …\nType of the operation rejected by rate limiting.\nNumber of nodes that responded to the read request\nNumber of nodes that responded to the write request\nNumber of nodes that responded to the read request\nNumber of nodes that responded to the read request\nWhether the operation was rate limited on the coordinator …\nNumber of nodes required to be alive to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nStatement id of the requested prepared query\nName of the table created, in case of keyspace creation it…\nType of write operation requested\nType of write operation requested\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollection types: Map, Set, and List. Those are composite …\nCollection variants of ColumnType. A collection is a …\nA type of:\nRESULT:Rows response, in partially serialized form.\nTypes that are “simple” (non-recursive).\nA ColumnType variants that are “simple” …\nRESULT:Rows response, in partially serialized form.\nVersatile container for ResultMetadata. Allows 2 types of …\nA container that can be considered an <code>Arc&lt;ResultMetadata&gt;</code> …\nA composite type with a defined size and elements of …\nDefinition of a user-defined type\nA C-struct-like type defined by the user.\nA composite list-like type that has a defined size and all …\nDeserializes ResultMetadata and deserializes rows count. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nindex in the serialized values\nReturns reference to the stored ResultMetadata.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>DeserializedMetadataAndRawRows</code> and returns …\nReturns a reference to the contained ResultMetadata.\nReturns the metadata associated with this response (table …\nReturns the serialized size of the raw metadata + raw rows.\nCreates an empty ResultMetadataHolder.\nCreates an empty RawMetadataAndRawRows.\nCreates an empty SelfBorrowedMetadataContainer.\npk_indexes are sorted by <code>index</code> and can be reordered in …\nReturns the serialized size of the raw rows.\nReturns the number of rows that the RESULT:Rows contain.\nCreates a typed iterator over the rows that lazily …\nsequence number in partition key\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn error indicating that a failure happened during …\nContains the <code>BatchValues</code> and <code>BatchValuesIterator</code> trait and …\nRetrieve an error reason by downcasting to specific type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>SerializationError</code>.\nContains the <code>RawBatchValues</code> and <code>RawBatchValuesIterator</code> …\nContains the <code>SerializeRow</code> trait and its implementations.\nContains the <code>SerializeValue</code> trait and its implementations.\nContains types and traits used for safe serialization of …\nRepresents a list of sets of values for a batch statement.\nImplements <code>BatchValues</code> from an <code>Iterator</code> over references to …\nAn <code>Iterator</code>-like object over the values from the parent …\nAn <code>Iterator</code>-like object over the values from the parent …\nImplements <code>BatchValuesIterator</code> from an <code>Iterator</code> over …\nA <code>BatchValuesIterator</code> over a tuple.\nReturns an iterator over the data contained in this object.\nReturn the number of sets of values, consuming the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the next set of values is empty or not and …\nCreates a new `BatchValuesFromIter`` object.\nSerializes the next set of values in the sequence and …\nSkips the next set of values.\nRepresents a list of sets of values for a batch statement.\nTakes <code>BatchValues</code> and an iterator over contexts, and turns …\nAn <code>Iterator</code>-like object over the values from the parent …\nAn <code>Iterator</code>-like object over the values from the parent …\nTakes <code>BatchValuesIterator</code> and an iterator over contexts, …\nReturns an iterator over the data contained in this object.\nReturn the number of sets of values, consuming the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the next set of values is empty or not and …\nCreates a new <code>RawBatchValuesAdapter</code> object.\nSerializes the next set of values in the sequence and …\nSkips the next set of values.\nFailed to serialize values for a statement, represented by …\nDescribes why serializing values for a statement failed.\nFailed to type check values for a statement, represented …\nDescribes why type checking values for a statement failed.\nA different column name was expected at given position.\nOne of the columns failed to serialize.\nA const empty instance, useful for taking references\nThe Rust type provides a value for some column, but that …\nContains information needed to serialize a row.\nRepresents a set of values that can be sent along a CQL …\nA buffer containing already serialized values.\nAn iterator over raw values in some <code>SerializedValues</code>.\nToo many values to add, max 65,535 values can be sent in a …\nA value required by the statement is not provided by the …\nThe Rust type provides <code>rust_cols</code> columns, but the …\nSerializes value and appends it to the list\nReturns the total serialized size of the values written so …\nReturns column/bind marker specifications for given query.\nReturns the number of values written so far.\nConstructs an empty <code>RowSerializationContext</code>, as if for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>SerializedValues</code> via given closure.\nCreates the serialization context from prepared statement …\nConstructs <code>SerializedValues</code> from given <code>SerializeRow</code> object.\nCreates the serialization context directly from column …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this row contains any values or not.\nReturns <code>true</code> if the row contains no elements.\nReturns an iterator over the values serialized into the …\nDetailed information about the failure.\nDetailed information about the failure.\nConstructs a new, empty <code>SerializedValues</code>.\nName of the Rust type used to represent the values.\nName of the Rust type used to represent the values.\nSerializes the row according to the information in the …\nThe error that caused the column serialization to fail.\nName of the column that failed to serialize.\nThe number of columns that the statement operates on.\nName of the column for which the DB requested a value.\nName of the column that is missing in the statement.\nName of the column for which the Rust type doesn’t …\nThe number of values that the Rust type provides.\nName of the column, as expected by the Rust type.\nSerialization of one of the built-in types failed.\nDescribes why serialization of some of the built-in types …\nType checking of one of the built-in types failed.\nDescribes why type checking some of the built-in types has …\nOne of the elements of the set/list failed to serialize.\nOne of the tuple elements failed to serialize.\nA different field name was expected at given position.\nOne of the fields failed to serialize.\nOne of the keys in the map failed to serialize.\nA type check failure specific to a CQL map.\nA serialization failure specific to a CQL map.\nDescribes why serialization of a map type failed.\nDescribes why type checking of a map type failed.\nExpected one from a list of particular types.\nThe name of the UDT being serialized to does not match.\nThe Rust data contains a field that is not present in the …\nExpected a type that can be empty.\nThe CQL type is not a map.\nThe CQL type is neither a set not a list.\nThe CQL type is not a tuple.\nThe CQL type is not a user defined type.\nA type that can be serialized and sent along with a CQL …\nA type check failure specific to a CQL set or list.\nA serialization failure specific to a CQL set or list.\nDescribes why serialization of a set or list type failed.\nDescribes why type checking of a set or list type failed.\nThe size of the Rust value is too large to fit in the CQL …\nThe many contains too many items, exceeding the protocol …\nThe set/list contains too many items, exceeding the …\nA type check failure specific to a CQL tuple.\nA serialization failure specific to a CQL tuple.\nDescribes why serialize of a tuple failed.\nDescribes why type checking of a tuple failed.\nA type check failure specific to a CQL UDT.\nA serialization failure specific to a CQL UDT.\nDescribes why serialization of a user defined type failed.\nDescribes why type checking of a user defined type failed.\nThe Rust data does not have a field that is required in …\nThe Rust value is out of range supported by the CQL type.\nOne of the values in the map failed to serialize.\nThe tuple has the wrong element count.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe CQL type that the Rust type was being serialized to.\nThe CQL type that the Rust type was being serialized to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetailed information about the failure.\nDetailed information about the failure.\nName of the Rust type being serialized.\nName of the Rust type being serialized.\nSerializes the value to given CQL type.\nThe list of types that the Rust type can serialize as.\nThe error that caused the tuple field serialization to …\nIndex of the tuple element that failed to serialize.\nThe number of elements that the CQL tuple type has.\nThe number of elements that the Rust tuple has.\nThe error that caused the UDT field serialization to fail.\nName of the field which failed to serialize.\nThe name of the CQL UDT field.\nName of field that the CQL UDT requires but is missing in …\nName of the Rust struct field that is missing in the UDT.\nKeyspace in which the UDT was defined.\nThe name of the Rust field.\nName of the UDT.\nThere was an attempt to produce a CQL value over the …\nAllows appending bytes to a non-null, non-unset cell.\nRepresents a handle to a CQL value that needs to be …\nAn interface that facilitates writing values for a CQL …\nAn object that indicates a type-level proof that something …\nAppends raw bytes to this cell.\nAppends the values from an existing <code>SerializedValues</code> …\nFinishes serializing the value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns this writter into a <code>CellValueBuilder</code> which can be …\nAppends a new value to the sequence and returns an object …\nAppends a sub-value to the end of the current contents of …\nCreates a new row writer based on an existing Vec.\nCreates a new cell writer based on an existing Vec.\nSets this value to be null, consuming this object.\nSets this value to represent an unset value, consuming …\nSets this value to a non-zero, non-unset value with given …\nReturns the number of values that were written so far.\nRepresents an counter value\nNative CQL date representation that allows for a bigger …\nNative CQL <code>decimal</code> representation.\nBorrowed version of native CQL <code>decimal</code> representation.\nRepresents a CQL Duration value\nNative CQL time representation.\nNative CQL timestamp representation that allows full …\nRepresents timeuuid (uuid V1) value\nNative CQL <code>varint</code> representation.\nA borrowed version of native CQL <code>varint</code> representation.\nDays since -5877641-06-23 i.e. 2^31 days before unix epoch …\nEnum providing a way to represent a value that might be …\nNanoseconds since midnight\nMilliseconds since unix epoch\nRepresents an unset value\nReturns a slice of bytes in two’s complement binary …\nReturns a slice of bytes in two’s complement binary …\nReturns a slice of bytes in two’s complement binary …\nReturns a slice of bytes in two’s complement binary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>CqlDecimal</code> from an array of bytes representing …\nCreates a <code>CqlDecimal</code> from a slice of bytes representing …\nCreates a <code>CqlDecimalBorrowed</code> from a slice of bytes …\nCreates a <code>CqlVarint</code> from an array of bytes in two’s …\nCreates a <code>CqlVarint</code> from a slice of bytes in two’s …\nCreates a <code>CqlVarintBorrowed</code> from a slice of bytes in two’…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>CqlDecimal</code> to an array of bytes in two’s …\nConverts <code>CqlVarint</code> to an array of bytes in two’s …\nOrder of <code>fields</code> vector must match the order of fields as …")