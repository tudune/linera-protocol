searchState.loadedDescShard("linera_client", 0, "This module provides a convenient library for writing a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nCloses the chain that was created for the benchmark.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a fungible token transfer operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates information related to one block per chain, up …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA <code>ChainListener</code> is a process that listens to notifications …\nWait after processing any notification (useful for rate …\nWait before processing any notification (useful for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new chain listener given client chains.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRuns the chain listener.\nDo not create blocks automatically to receive incoming …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nApplies the given function to the chain client.\nRetrieve the default account. Current this is the common …\nRetrieve the default chain.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRemembers the new chain and its owner (if any) in the …\nReturns a reference to the wallet.\nReturns the wallet as a mutable reference.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe policy for handling incoming messages.\nThe delay when downloading a blob, after which we try a …\nThese applications are allowed to call services as oracles …\nThese applications are allowed to change the application …\nThese applications are allowed to close the current chain …\nIf present, only operations from the specified …\nThe age of an incoming tracked or protected message after …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn additional delay, after reaching a quorum, to wait for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the file storing the keystore state.\n(EXPERIMENTAL) Whether application services can persist in …\nThese applications are allowed to make HTTP requests on …\nAt least one operation or incoming message from each of …\nThe maximal number of chains loaded in memory at a given …\nThe maximum number of incoming message bundles to include …\nNumber of times to retry connecting to a validator.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nTimeout for receiving responses (milliseconds)\nA set of chains to restrict incoming messages from. By …\nDelay increment for retrying to connect to a validator.\nTimeout for sending queries (milliseconds)\nWhether to wait until a quorum of validators has confirmed …\nSets the file storing the private state of user chains (an …\nGiven an ASCII alphanumeric parameter <code>X</code>, read the wallet …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe configuration file for the linera-exporter.\nThe (public) configuration for all validators.\nThe uri to provide export services to.\nConfiguration file for the exports.\nThe public configuration of a validator.\nThe private configuration of a validator service.\nThe account key of the validator.\nThe configuration file for the export destinations.\nThe destination URIs to export to.\nThe host name of the target destination (IP or hostname).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentity for the block exporter state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe network configuration for the validator.\nCreates a <code>GenesisConfig</code> with the first chain being the …\nThe port number of the target destination.\nThe public key of the validator.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe server configuration for the linera-exporter.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nReturns after the specified time or if we receive a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a user chain that we own.\nCreates an entry for a chain that we don’t own. The …\nReturns the list of all chain IDs for which we have a …\nThe owner of the chain, if we own it.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")